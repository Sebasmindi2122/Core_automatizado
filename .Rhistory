year = PY) |>
bind_rows(journal_df |>
select(from = JI_main,
to = JI_ref,
PY = PY_ref) %>%
tidygraph::as_tbl_graph() |>
tidygraph::activate(edges) |>
tidygraph::as_tibble() |>
dplyr::select(CO = to,
year = PY)) |>
unique() |>
dplyr::group_by(CO) |>
dplyr::slice(which.min(year)) |>
dplyr::ungroup() |>
dplyr::select(year) |>
dplyr::group_by(year) |>
dplyr::count(year) |>
dplyr::filter(year >= year_start,
year <= year_end) |>
dplyr::ungroup() |>
dplyr::mutate(percentage = n / max(n)) |>
select(year, percentage)
figure_3c <-
figure_3c_nodes |>
dplyr::mutate(type = "nodes") |>
bind_rows(figure_3c_edges |>
dplyr::mutate(type = "links")) |>
ggplot(aes(x = year,
y = percentage,
color = type)) +
geom_point() +
geom_line() +
theme(legend.position = "right",
text = element_text(color = "black",
face = "bold",
family = "Times"),
plot.title = element_text(size = 25),
panel.background = element_rect(fill = "white"),
axis.text.y = element_text(size = 15,
colour = "black"),
axis.text.x = element_text(size = 15,
colour = "black",
angle = 45, vjust = 0.5
),
axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
legend.text = element_text(size = "15"),
legend.title = element_blank()) +
labs(title = "Nodes and links through time",
y = "Percentage") +
scale_y_continuous(labels = scales::percent) +
scale_x_continuous(breaks = seq(year_start, year_end, by = 1))
figure_3c
ggsave("/home/sebas/Escritorio/Figuras_Analisys_sticionemeitrico/figura_tres/figura_3c.svg",
plot = figure_3c,
device = "svg")
table_4_authors |>
dplyr::select(authors_total, papers_total) %>%
DT::datatable(class = "cell-border stripe",
rownames = F,
filter = "top",
editable = FALSE,
extensions = "Buttons",
options = list(dom = "Bfrtip",
buttons = c("copy",
"csv",
"excel",
"pdf",
"print")))
author_network_time <-
author_df |>
tidygraph::as_tbl_graph(directed = FALSE) |>
activate(nodes) |>
dplyr::mutate(components = tidygraph::group_components(type = "weak")) |>
dplyr::filter(components == 1) |>
dplyr::mutate(degree = centrality_degree(),
community = as.factor(group_louvain()))
author_network <-
author_df |>
dplyr::select(-PY) |>
dplyr::group_by(from, to) |>
dplyr::count() |>
dplyr::rename(weight = n) |>
tidygraph::as_tbl_graph(directed = FALSE) |>
activate(nodes) |>
# dplyr::mutate(components = tidygraph::group_components(type = "weak")) |>
# dplyr::filter(components == 1) |>
dplyr::mutate(degree = centrality_degree(),
community = as.factor(group_louvain()))
figure_4a <-
author_network |>
activate(nodes) |>
data.frame() |>
dplyr::count(community) |>
slice(1:10) |>
ggplot(aes(x = reorder(community, n), y = n)) +
geom_point(stat = "identity") +
geom_line(group = 1) +
# geom_text(label = as.numeric(community),
#           nudge_x = 0.5,
#           nudge_y = 0.5,
#           check_overlap = T) +
labs(title = "Communities by size",
x = "communities",
y = "Authors") +
theme(text = element_text(color = "black",
face = "bold",
family = "Times"),
plot.title = element_text(size = 25),
panel.background = element_rect(fill = "white"),
axis.text.y = element_text(size = 15,
colour = "black"),
axis.text.x = element_text(size = 15,
colour = "black"),
axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20)
)
figure_4a
ggsave("/home/sebas/Escritorio/Figuras_Analisys_sticionemeitrico/figura_cuatro/figura_4a.svg",
plot = figure_4a,
device = "svg")
# Create a dataframe with links
fig_1c_edges <-
author_network_time |>
activate(edges) |>
as_tibble() |>
dplyr::select(year = PY) |>
dplyr::count(year) |>
dplyr::filter(year >= year_start,
year <= year_end) |>
dplyr::mutate(percentage = n/max(n)) |>
dplyr::select(year, percentage)
# Create a data frame with author and year
fig_1c_nodes <- # 21 row
author_network_time |>
activate(edges) |>
as_tibble() |>
dplyr::select(author = from,
year = PY) |>
bind_rows(author_network_time |>
activate(edges) |>
as_tibble() |>
dplyr::select(author = to,
year = PY)) |>
unique() |>
dplyr::group_by(author) |>
dplyr::slice(which.min(year)) |>
dplyr::ungroup() |>
dplyr::select(year) |>
dplyr::group_by(year) |>
dplyr::count(year) |>
dplyr::filter(year >= year_start,
year <= year_end) |>
dplyr::ungroup() |>
dplyr::mutate(percentage = n / max(n)) |>
select(year, percentage)
figure_4b <-
fig_1c_nodes |>
dplyr::mutate(type = "nodes") |>
bind_rows(fig_1c_edges |>
dplyr::mutate(type = "links")) |>
ggplot(aes(x = year,
y = percentage,
color = type)) +
geom_point() +
geom_line() +
theme(legend.position = "right",
text = element_text(color = "black",
face = "bold",
family = "Times"),
plot.title = element_text(size = 25),
panel.background = element_rect(fill = "white"),
axis.text.y = element_text(size = 15,
colour = "black"),
axis.text.x = element_text(size = 15,
colour = "black",
angle = 45, vjust = 0.5
),
axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
legend.text = element_text(size = "15"),
legend.title = element_blank()) +
labs(title = "Nodes and links through time",
y = "Percentage") +
scale_y_continuous(labels = scales::percent) +
scale_x_continuous(breaks = seq(year_start, year_end, by = 1))
figure_4b
ggsave("/home/sebas/Escritorio/Figuras_Analisys_sticionemeitrico/figura_cuatro/figura_4b.svg",
plot = figure_4b,
device = "svg")
asn_TM_connected_1 <-
author_network |>
activate(nodes) |>
dplyr::mutate(community = as.numeric(community)) |>
# filter(community >= 6) |>
dplyr::filter(community == 1) |>
# group_by(community) |>
dplyr::mutate(degree_community = centrality_degree()) |>
dplyr::arrange(desc(degree_community)) |>
dplyr::slice(1:10)
asn_TM_connected_2 <-
author_network |>
activate(nodes) |>
dplyr::mutate(community = as.numeric(community)) |>
# filter(community >= 6) |>
dplyr::filter(community == 2) |>
# group_by(community) |>
dplyr::mutate(degree_community = centrality_degree()) |>
dplyr::arrange(desc(degree_community))|>
dplyr::slice(1:10)
asn_TM_connected_3 <-
author_network |>
activate(nodes) |>
dplyr::mutate(community = as.numeric(community)) |>
# filter(community >= 6) |>
dplyr::filter(community == 3) |>
# group_by(community) |>
dplyr::mutate(degree_community = centrality_degree()) |>
dplyr::arrange(desc(degree_community)) |>
dplyr::slice(1:10)
asn_TM_connected_4 <-
author_network |>
activate(nodes) |>
dplyr::mutate(community = as.numeric(community)) |>
# filter(community >= 6) |>
dplyr::filter(community == 4) |>
# group_by(community) |>
dplyr::mutate(degree_community = centrality_degree()) |>
dplyr::arrange(desc(degree_community)) |>
dplyr::slice(1:10)
asn_TM_connected_5 <-
author_network |>
activate(nodes) |>
dplyr::mutate(community = as.numeric(community)) |>
# filter(community >= 6) |>
dplyr::filter(community == 5) |>
# group_by(community) |>
dplyr::mutate(degree_community = centrality_degree()) |>
dplyr::arrange(desc(degree_community)) |>
dplyr::slice(1:10)
asn_TM_connected_6 <-
author_network |>
activate(nodes) |>
dplyr::mutate(community = as.numeric(community)) |>
# filter(community >= 6) |>
dplyr::filter(community == 6) |>
# group_by(community) |>
dplyr::mutate(degree_community = centrality_degree()) |>
dplyr::arrange(desc(degree_community)) |>
dplyr::slice(1:10)
nodes_community_1 <-
asn_TM_connected_1 |>
activate(nodes) |>
as_tibble() |>
dplyr::select(name)
nodes_community_2 <-
asn_TM_connected_2 |>
activate(nodes) |>
as_tibble() |>
dplyr::select(name)
nodes_community_3 <-
asn_TM_connected_3 |>
activate(nodes) |>
as_tibble() |>
dplyr::select(name)
# nodes_community_4 <-
#   asn_TM_connected_4 |>
#   activate(nodes) |>
#   as_tibble() |>
#   dplyr::select(name)
# nodes_community_5 <-
#   asn_TM_connected_5 |>
#   activate(nodes) |>
#   as_tibble() |>
#   dplyr::select(name)
# nodes_community_6 <-
#   asn_TM_connected_6 |>
#   activate(nodes) |>
#   as_tibble() |>
#   dplyr::select(name)
nodes_selected_10 <-
nodes_community_1 |>
bind_rows(nodes_community_2,
nodes_community_3,
# nodes_community_4,
# nodes_community_5,
# nodes_community_6
)
asn_selected_nodes <-
author_network |>
activate(nodes) |>
dplyr::filter(name %in% nodes_selected_10$name)  |>
dplyr::mutate(degree = centrality_degree())
# dplyr::mutate(final_plot = tidygraph::group_components(type = "weak")) |>
# dplyr::filter(final_plot == 1)
figure_4c <-
asn_selected_nodes |>
ggraph(layout = "graphopt") +
geom_edge_link(width = 1,
colour = "lightgray") +
geom_node_point(aes(color = community,
size = degree)) +
geom_node_text(aes(label = name), repel = TRUE) +
theme_graph()
figure_4c
ggsave("/home/sebas/Escritorio/Figuras_Analisys_sticionemeitrico/figura_cuatro/figura_4c.svg",
plot = figure_4c,
device = "svg")
egos  <-
AU_ego_edges %>%
tidygraph::as_tbl_graph() %>%
tidygraph::activate(nodes) %>%
tidygraph::mutate(id = AU_ego_nodes$id) %>%
dplyr::left_join(AU_ego_nodes %>%
tidygraph::mutate(id = as.character(id))) %>%
dplyr::mutate(component = as.character(component))
egos |>
ggraph(layout = "graphopt") +
geom_edge_link(aes(width = weight),
colour = "lightgray") +
scale_edge_width(name = "Link strength") +
geom_node_point(aes(color = component,
size = degree)) +
geom_node_text(aes(label = Label), repel = TRUE) +
scale_size(name = "Degree") +
# scale_color_binned(name = "Communities") +
theme_graph()
# Guardar el gráfico en formato SVG en una carpeta específica
# ggsave("/home/sebas/Escritorio/Figuras_Analisys_sticionemeitrico/figura_cuatro/egos_nodos.svg",
#        plot = graph_plot,
#        device = "svg")
tos %>%
DT::datatable(class = "cell-border stripe",
rownames = F,
filter = "top",
editable = FALSE,
extensions = "Buttons",
options = list(dom = "Bfrtip",
buttons = c("copy",
"csv",
"excel",
"pdf",
"print")))
figure_2_country_wos_scopus_1 <- readxl::read_excel(tf, 12L)
nombres_deseados <- c("Source","Target","Weigh")
if (!identical(colnames(figure_2_country_wos_scopus_1), nombres_deseados)) {
colnames(figure_2_country_wos_scopus_1) <- nombres_deseados
}
directorio_actual <- getwd()
nombre_carpeta2 <- "figura_dos"
ruta_carpeta2 <- file.path(directorio_actual, nombre_carpeta2)
nombre_archivo2 <- "figure_2_country_wos_scopus_1.csv"
write.csv(figure_2_country_wos_scopus_1, file.path(ruta_carpeta2, nombre_archivo2), row.names = FALSE)
nombre_carpeta3 <- "figura_tres"
ruta_carpeta3 <- file.path(directorio_actual, nombre_carpeta3)
nombre_carpeta4 <- "figura_cuatro"
ruta_carpeta4 <- file.path(directorio_actual, nombre_carpeta4)
so_edges <- "SO_edges.csv"
so_nodes <- "SO_nodes.csv"
AU_edges <- "AU_ego_edges.csv"
AU_nodes <- "AU_ego_nodes.csv"
ruta_carpeta4 <- file.path(directorio_actual, "figura_cuatro")
figure_2_country_wos_scopus_1 <- readxl::read_excel(tf, 12L)
nombres_deseados <- c("Source","Target","Weigh")
if (!identical(colnames(figure_2_country_wos_scopus_1), nombres_deseados)) {
colnames(figure_2_country_wos_scopus_1) <- nombres_deseados
}
directorio_actual <- getwd()
ruta_carpeta2 <- file.path(directorio_actual, nombre_carpeta2)
nombre_archivo2 <- "figure_2_country_wos_scopus_1.csv"
write.csv(figure_2_country_wos_scopus_1, file.path(ruta_carpeta2, "figura_dos"), row.names = FALSE)
ruta_carpeta3 <- file.path(directorio_actual, "figura_tres")
ruta_carpeta4 <- file.path(directorio_actual, "figura_cuatro")
so_edges <- "SO_edges.csv"
so_nodes <- "SO_nodes.csv"
AU_edges <- "AU_ego_edges.csv"
AU_nodes <- "AU_ego_nodes.csv"
SO_edges <- readxl::read_excel(tf, 19L)
write.csv(SO_edges, file.path(ruta_carpeta3, so_edges), row.names = FALSE)
SO_nodes <- readxl::read_excel(tf, 20L)
write.csv(SO_nodes, file.path(ruta_carpeta3, so_nodes), row.names = FALSE)
AU_ego_edges <- readxl::read_excel(tf, 21L)
write.csv(AU_ego_edges, file.path(ruta_carpeta4, AU_edges), row.names = FALSE)
AU_ego_nodes <- readxl::read_excel(tf, 22L)
write.csv(AU_ego_nodes,file.path(ruta_carpeta4, AU_nodes), row.names = FALSE)
reticulate::repl_python()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(dev = c('svg')) # set output device to svg
library(conflicted)
library(tidyverse)
library(tidygraph)
library(igraph)
library(ggplot2)
library(bibliometrix)
library(tosr)
library(here)
library(lubridate)
#library(sjrdata)
library(openxlsx)
library(zoo)
library(RSQLite)
library(dplyr)
library(journalabbr)
library(ggraph)
library(plyr)
library(XML)
library(readxl)
source("verbs.R")
giant.component <- function(graph) {
cl <- igraph::clusters(graph)
igraph::induced.subgraph(graph,
which(cl$membership == which.max(cl$csize)))
}
library(httr)   #Url semilla wos y scopus
key <- '1qWT8ekf7LUPp2EYFfJHIlS9oL8ybGBnsb6hTt9efob4'
url1 <- paste0('https://spreadsheets.google.com/feeds/download/spreadsheets/Export?key=',key,'&exportFormat=xlsx')
httr::GET(url1, write_disk(tf <- tempfile(fileext = ".xlsx")))
#Congurar segun los años de publicaicon.
year_start = 2000
year_end = 2024
figure_2_country_wos_scopus_1 <- readxl::read_excel(tf, 12L)
nombres_deseados <- c("Source","Target","Weigh")
if (!identical(colnames(figure_2_country_wos_scopus_1), nombres_deseados)) {
colnames(figure_2_country_wos_scopus_1) <- nombres_deseados
}
directorio_actual <- getwd()
ruta_carpeta2 <- file.path(directorio_actual, nombre_carpeta2)
nombre_archivo2 <- "figure_2_country_wos_scopus_1.csv"
write.csv(figure_2_country_wos_scopus_1, file.path(ruta_carpeta2, "figura_dos"), row.names = FALSE)
ruta_carpeta3 <- file.path(directorio_actual, "figura_tres")
ruta_carpeta4 <- file.path(directorio_actual, "figura_cuatro")
so_edges <- "SO_edges.csv"
so_nodes <- "SO_nodes.csv"
AU_edges <- "AU_ego_edges.csv"
AU_nodes <- "AU_ego_nodes.csv"
wos_scopus <- readxl::read_excel(tf, 1L)
wos <- readxl::read_excel(tf, 2L)
scopus <- readxl::read_excel(tf, 3L)
reference_df <- readxl::read_excel(tf, 4L)
journal_df <- readxl::read_excel(tf, 5L)
author_df <- readxl::read_excel(tf, 6L)
TC_all <- readxl::read_excel(tf, 7L)
figure_1_data <- readxl::read_excel(tf, 8L)
table_2_country <- readxl::read_excel(tf, 10L)
figure_2_country_wos_scopus <- readxl::read_excel(tf, 11L)
figure_2_country_wos_scopus_1 <-
readxl::read_excel(tf, 12L) |>
tidygraph::as_tbl_graph(directed = FALSE) |>
activate(nodes) |>
dplyr::mutate(community = tidygraph::group_louvain(),
degree = tidygraph::centrality_degree(),
community = as.factor(community))
table_3_journal <- readxl::read_excel(tf, 13L)
table_4_authors <- readxl::read_excel(tf, 14L)
AU_CO_links <- readxl::read_excel(tf, 15L)
tos <- readxl::read_excel(tf, 16L)
edges_tos <- readxl::read_excel(tf, 17L)
nodes_tos <- readxl::read_excel(tf, 18L)
SO_edges <- readxl::read_excel(tf, 19L)
write.csv(SO_edges, file.path(ruta_carpeta3, so_edges), row.names = FALSE)
SO_nodes <- readxl::read_excel(tf, 20L)
write.csv(SO_nodes, file.path(ruta_carpeta3, so_nodes), row.names = FALSE)
AU_ego_edges <- readxl::read_excel(tf, 21L)
write.csv(AU_ego_edges, file.path(ruta_carpeta4, AU_edges), row.names = FALSE)
AU_ego_nodes <- readxl::read_excel(tf, 22L)
write.csv(AU_ego_nodes,file.path(ruta_carpeta4, AU_nodes), row.names = FALSE)
table_1 <-
tibble(wos = length(wos$AU), # Create a dataframe with the values.
scopus = length(scopus$AU),
total = length(wos_scopus$AU))
table_1 %>%
DT::datatable(class = "cell-border stripe",
rownames = F,
filter = "top",
editable = FALSE,
extensions = "Buttons",
options = list(dom = "Bfrtip",
buttons = c("copy",
"csv",
"excel",
"pdf",
"print")))
wos_scopus %>%
tidyr::separate_rows(DT, sep = ";") %>%
dplyr::count(DT, sort = TRUE)%>%
dplyr::mutate(percentage = n /sum(n),
percentage = percentage * 100,
percentage = round(percentage, digits = 2)) %>%
dplyr::rename(total = n) %>%
DT::datatable(class = "cell-border stripe",
rownames = F,
filter = "top",
editable = FALSE,
extensions = "Buttons",
options = list(dom = "Bfrtip",
buttons = c("copy",
"csv",
"excel",
"pdf",
"print")))
library(reticulate)
# create a new environment
# conda_create("r-reticulate")
# install Matplotlib
# conda_install("r-reticulate", "matplotlib")
# import Matplotlib (it will be automatically discovered in "r-reticulate")
plt <- import("matplotlib")
np <- import("numpy")
# From Double get integers
# TC y
TC_all$TC_sum_all <- as.integer(TC_all$TC_sum_all)
reticulate::repl_python()
